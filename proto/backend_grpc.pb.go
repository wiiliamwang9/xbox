// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/backend.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackendService_HealthCheck_FullMethodName        = "/backend.BackendService/HealthCheck"
	BackendService_GetAgents_FullMethodName          = "/backend.BackendService/GetAgents"
	BackendService_GetAgent_FullMethodName           = "/backend.BackendService/GetAgent"
	BackendService_GetAgentStats_FullMethodName      = "/backend.BackendService/GetAgentStats"
	BackendService_DeployAgent_FullMethodName        = "/backend.BackendService/DeployAgent"
	BackendService_UninstallAgent_FullMethodName     = "/backend.BackendService/UninstallAgent"
	BackendService_UpdateAgentConfig_FullMethodName  = "/backend.BackendService/UpdateAgentConfig"
	BackendService_GetAgentMonitoring_FullMethodName = "/backend.BackendService/GetAgentMonitoring"
	BackendService_GetIPRanges_FullMethodName        = "/backend.BackendService/GetIPRanges"
	BackendService_TestAgent_FullMethodName          = "/backend.BackendService/TestAgent"
	BackendService_GetProtocolInfo_FullMethodName    = "/backend.BackendService/GetProtocolInfo"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 后端服务接口 - 用于SaaS Backend与Xbox Controller通信
type BackendServiceClient interface {
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 节点管理
	GetAgents(ctx context.Context, in *GetAgentsRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error)
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	GetAgentStats(ctx context.Context, in *GetAgentStatsRequest, opts ...grpc.CallOption) (*GetAgentStatsResponse, error)
	// Agent部署管理
	DeployAgent(ctx context.Context, in *DeployAgentRequest, opts ...grpc.CallOption) (*DeployAgentResponse, error)
	UninstallAgent(ctx context.Context, in *UninstallAgentRequest, opts ...grpc.CallOption) (*UninstallAgentResponse, error)
	// 配置管理
	UpdateAgentConfig(ctx context.Context, in *UpdateAgentConfigRequest, opts ...grpc.CallOption) (*UpdateAgentConfigResponse, error)
	// 监控数据获取
	GetAgentMonitoring(ctx context.Context, in *GetAgentMonitoringRequest, opts ...grpc.CallOption) (*GetAgentMonitoringResponse, error)
	// IP段管理
	GetIPRanges(ctx context.Context, in *GetIPRangesRequest, opts ...grpc.CallOption) (*GetIPRangesResponse, error)
	// 节点测试
	TestAgent(ctx context.Context, in *TestAgentRequest, opts ...grpc.CallOption) (*TestAgentResponse, error)
	// 协议支持查询
	GetProtocolInfo(ctx context.Context, in *GetProtocolInfoRequest, opts ...grpc.CallOption) (*GetProtocolInfoResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, BackendService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetAgents(ctx context.Context, in *GetAgentsRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, BackendService_GetAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetAgentStats(ctx context.Context, in *GetAgentStatsRequest, opts ...grpc.CallOption) (*GetAgentStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentStatsResponse)
	err := c.cc.Invoke(ctx, BackendService_GetAgentStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) DeployAgent(ctx context.Context, in *DeployAgentRequest, opts ...grpc.CallOption) (*DeployAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployAgentResponse)
	err := c.cc.Invoke(ctx, BackendService_DeployAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UninstallAgent(ctx context.Context, in *UninstallAgentRequest, opts ...grpc.CallOption) (*UninstallAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallAgentResponse)
	err := c.cc.Invoke(ctx, BackendService_UninstallAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateAgentConfig(ctx context.Context, in *UpdateAgentConfigRequest, opts ...grpc.CallOption) (*UpdateAgentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentConfigResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateAgentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetAgentMonitoring(ctx context.Context, in *GetAgentMonitoringRequest, opts ...grpc.CallOption) (*GetAgentMonitoringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentMonitoringResponse)
	err := c.cc.Invoke(ctx, BackendService_GetAgentMonitoring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetIPRanges(ctx context.Context, in *GetIPRangesRequest, opts ...grpc.CallOption) (*GetIPRangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIPRangesResponse)
	err := c.cc.Invoke(ctx, BackendService_GetIPRanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) TestAgent(ctx context.Context, in *TestAgentRequest, opts ...grpc.CallOption) (*TestAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestAgentResponse)
	err := c.cc.Invoke(ctx, BackendService_TestAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetProtocolInfo(ctx context.Context, in *GetProtocolInfoRequest, opts ...grpc.CallOption) (*GetProtocolInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProtocolInfoResponse)
	err := c.cc.Invoke(ctx, BackendService_GetProtocolInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility.
//
// 后端服务接口 - 用于SaaS Backend与Xbox Controller通信
type BackendServiceServer interface {
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// 节点管理
	GetAgents(context.Context, *GetAgentsRequest) (*GetAgentsResponse, error)
	GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	GetAgentStats(context.Context, *GetAgentStatsRequest) (*GetAgentStatsResponse, error)
	// Agent部署管理
	DeployAgent(context.Context, *DeployAgentRequest) (*DeployAgentResponse, error)
	UninstallAgent(context.Context, *UninstallAgentRequest) (*UninstallAgentResponse, error)
	// 配置管理
	UpdateAgentConfig(context.Context, *UpdateAgentConfigRequest) (*UpdateAgentConfigResponse, error)
	// 监控数据获取
	GetAgentMonitoring(context.Context, *GetAgentMonitoringRequest) (*GetAgentMonitoringResponse, error)
	// IP段管理
	GetIPRanges(context.Context, *GetIPRangesRequest) (*GetIPRangesResponse, error)
	// 节点测试
	TestAgent(context.Context, *TestAgentRequest) (*TestAgentResponse, error)
	// 协议支持查询
	GetProtocolInfo(context.Context, *GetProtocolInfoRequest) (*GetProtocolInfoResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendServiceServer struct{}

func (UnimplementedBackendServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBackendServiceServer) GetAgents(context.Context, *GetAgentsRequest) (*GetAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgents not implemented")
}
func (UnimplementedBackendServiceServer) GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedBackendServiceServer) GetAgentStats(context.Context, *GetAgentStatsRequest) (*GetAgentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStats not implemented")
}
func (UnimplementedBackendServiceServer) DeployAgent(context.Context, *DeployAgentRequest) (*DeployAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployAgent not implemented")
}
func (UnimplementedBackendServiceServer) UninstallAgent(context.Context, *UninstallAgentRequest) (*UninstallAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallAgent not implemented")
}
func (UnimplementedBackendServiceServer) UpdateAgentConfig(context.Context, *UpdateAgentConfigRequest) (*UpdateAgentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentConfig not implemented")
}
func (UnimplementedBackendServiceServer) GetAgentMonitoring(context.Context, *GetAgentMonitoringRequest) (*GetAgentMonitoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentMonitoring not implemented")
}
func (UnimplementedBackendServiceServer) GetIPRanges(context.Context, *GetIPRangesRequest) (*GetIPRangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPRanges not implemented")
}
func (UnimplementedBackendServiceServer) TestAgent(context.Context, *TestAgentRequest) (*TestAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAgent not implemented")
}
func (UnimplementedBackendServiceServer) GetProtocolInfo(context.Context, *GetProtocolInfoRequest) (*GetProtocolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolInfo not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}
func (UnimplementedBackendServiceServer) testEmbeddedByValue()                        {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetAgents(ctx, req.(*GetAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetAgentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetAgentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetAgentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetAgentStats(ctx, req.(*GetAgentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_DeployAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).DeployAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_DeployAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).DeployAgent(ctx, req.(*DeployAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UninstallAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UninstallAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UninstallAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UninstallAgent(ctx, req.(*UninstallAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateAgentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateAgentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateAgentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateAgentConfig(ctx, req.(*UpdateAgentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetAgentMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentMonitoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetAgentMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetAgentMonitoring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetAgentMonitoring(ctx, req.(*GetAgentMonitoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetIPRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetIPRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetIPRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetIPRanges(ctx, req.(*GetIPRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_TestAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).TestAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_TestAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).TestAgent(ctx, req.(*TestAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetProtocolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtocolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetProtocolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetProtocolInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetProtocolInfo(ctx, req.(*GetProtocolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _BackendService_HealthCheck_Handler,
		},
		{
			MethodName: "GetAgents",
			Handler:    _BackendService_GetAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _BackendService_GetAgent_Handler,
		},
		{
			MethodName: "GetAgentStats",
			Handler:    _BackendService_GetAgentStats_Handler,
		},
		{
			MethodName: "DeployAgent",
			Handler:    _BackendService_DeployAgent_Handler,
		},
		{
			MethodName: "UninstallAgent",
			Handler:    _BackendService_UninstallAgent_Handler,
		},
		{
			MethodName: "UpdateAgentConfig",
			Handler:    _BackendService_UpdateAgentConfig_Handler,
		},
		{
			MethodName: "GetAgentMonitoring",
			Handler:    _BackendService_GetAgentMonitoring_Handler,
		},
		{
			MethodName: "GetIPRanges",
			Handler:    _BackendService_GetIPRanges_Handler,
		},
		{
			MethodName: "TestAgent",
			Handler:    _BackendService_TestAgent_Handler,
		},
		{
			MethodName: "GetProtocolInfo",
			Handler:    _BackendService_GetProtocolInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/backend.proto",
}
