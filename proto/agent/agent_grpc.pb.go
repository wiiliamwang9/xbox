// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_RegisterAgent_FullMethodName         = "/agent.AgentService/RegisterAgent"
	AgentService_Heartbeat_FullMethodName             = "/agent.AgentService/Heartbeat"
	AgentService_UpdateConfig_FullMethodName          = "/agent.AgentService/UpdateConfig"
	AgentService_UpdateRules_FullMethodName           = "/agent.AgentService/UpdateRules"
	AgentService_GetStatus_FullMethodName             = "/agent.AgentService/GetStatus"
	AgentService_UpdateBlacklist_FullMethodName       = "/agent.AgentService/UpdateBlacklist"
	AgentService_UpdateWhitelist_FullMethodName       = "/agent.AgentService/UpdateWhitelist"
	AgentService_GetFilterConfig_FullMethodName       = "/agent.AgentService/GetFilterConfig"
	AgentService_RollbackConfig_FullMethodName        = "/agent.AgentService/RollbackConfig"
	AgentService_UpdateMultiplexConfig_FullMethodName = "/agent.AgentService/UpdateMultiplexConfig"
	AgentService_GetMultiplexConfig_FullMethodName    = "/agent.AgentService/GetMultiplexConfig"
	AgentService_UninstallAgent_FullMethodName        = "/agent.AgentService/UninstallAgent"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Agent管理服务
type AgentServiceClient interface {
	// 节点注册
	RegisterAgent(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 心跳检测
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// 配置下发
	UpdateConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// 规则管理
	UpdateRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error)
	// 获取节点状态
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// 更新黑名单
	UpdateBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error)
	// 更新白名单
	UpdateWhitelist(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*WhitelistResponse, error)
	// 获取黑白名单配置
	GetFilterConfig(ctx context.Context, in *FilterConfigRequest, opts ...grpc.CallOption) (*FilterConfigResponse, error)
	// 回滚配置
	RollbackConfig(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error)
	// 更新多路复用配置
	UpdateMultiplexConfig(ctx context.Context, in *MultiplexConfigRequest, opts ...grpc.CallOption) (*MultiplexConfigResponse, error)
	// 获取多路复用配置
	GetMultiplexConfig(ctx context.Context, in *MultiplexStatusRequest, opts ...grpc.CallOption) (*MultiplexStatusResponse, error)
	// 卸载Agent
	UninstallAgent(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (*UninstallResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) RegisterAgent(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AgentService_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, AgentService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateRules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, AgentService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateBlacklist(ctx context.Context, in *BlacklistRequest, opts ...grpc.CallOption) (*BlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlacklistResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateWhitelist(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*WhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhitelistResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetFilterConfig(ctx context.Context, in *FilterConfigRequest, opts ...grpc.CallOption) (*FilterConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterConfigResponse)
	err := c.cc.Invoke(ctx, AgentService_GetFilterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) RollbackConfig(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, AgentService_RollbackConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateMultiplexConfig(ctx context.Context, in *MultiplexConfigRequest, opts ...grpc.CallOption) (*MultiplexConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiplexConfigResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateMultiplexConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetMultiplexConfig(ctx context.Context, in *MultiplexStatusRequest, opts ...grpc.CallOption) (*MultiplexStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiplexStatusResponse)
	err := c.cc.Invoke(ctx, AgentService_GetMultiplexConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UninstallAgent(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (*UninstallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallResponse)
	err := c.cc.Invoke(ctx, AgentService_UninstallAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
//
// Agent管理服务
type AgentServiceServer interface {
	// 节点注册
	RegisterAgent(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 心跳检测
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// 配置下发
	UpdateConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	// 规则管理
	UpdateRules(context.Context, *RulesRequest) (*RulesResponse, error)
	// 获取节点状态
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// 更新黑名单
	UpdateBlacklist(context.Context, *BlacklistRequest) (*BlacklistResponse, error)
	// 更新白名单
	UpdateWhitelist(context.Context, *WhitelistRequest) (*WhitelistResponse, error)
	// 获取黑白名单配置
	GetFilterConfig(context.Context, *FilterConfigRequest) (*FilterConfigResponse, error)
	// 回滚配置
	RollbackConfig(context.Context, *RollbackRequest) (*RollbackResponse, error)
	// 更新多路复用配置
	UpdateMultiplexConfig(context.Context, *MultiplexConfigRequest) (*MultiplexConfigResponse, error)
	// 获取多路复用配置
	GetMultiplexConfig(context.Context, *MultiplexStatusRequest) (*MultiplexStatusResponse, error)
	// 卸载Agent
	UninstallAgent(context.Context, *UninstallRequest) (*UninstallResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) RegisterAgent(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedAgentServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAgentServiceServer) UpdateConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedAgentServiceServer) UpdateRules(context.Context, *RulesRequest) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRules not implemented")
}
func (UnimplementedAgentServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAgentServiceServer) UpdateBlacklist(context.Context, *BlacklistRequest) (*BlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlacklist not implemented")
}
func (UnimplementedAgentServiceServer) UpdateWhitelist(context.Context, *WhitelistRequest) (*WhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhitelist not implemented")
}
func (UnimplementedAgentServiceServer) GetFilterConfig(context.Context, *FilterConfigRequest) (*FilterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilterConfig not implemented")
}
func (UnimplementedAgentServiceServer) RollbackConfig(context.Context, *RollbackRequest) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackConfig not implemented")
}
func (UnimplementedAgentServiceServer) UpdateMultiplexConfig(context.Context, *MultiplexConfigRequest) (*MultiplexConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMultiplexConfig not implemented")
}
func (UnimplementedAgentServiceServer) GetMultiplexConfig(context.Context, *MultiplexStatusRequest) (*MultiplexStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiplexConfig not implemented")
}
func (UnimplementedAgentServiceServer) UninstallAgent(context.Context, *UninstallRequest) (*UninstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallAgent not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RegisterAgent(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateRules(ctx, req.(*RulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateBlacklist(ctx, req.(*BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateWhitelist(ctx, req.(*WhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetFilterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetFilterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetFilterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetFilterConfig(ctx, req.(*FilterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_RollbackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RollbackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_RollbackConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RollbackConfig(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateMultiplexConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplexConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateMultiplexConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateMultiplexConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateMultiplexConfig(ctx, req.(*MultiplexConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetMultiplexConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplexStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetMultiplexConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetMultiplexConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetMultiplexConfig(ctx, req.(*MultiplexStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UninstallAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UninstallAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UninstallAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UninstallAgent(ctx, req.(*UninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _AgentService_RegisterAgent_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _AgentService_Heartbeat_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _AgentService_UpdateConfig_Handler,
		},
		{
			MethodName: "UpdateRules",
			Handler:    _AgentService_UpdateRules_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _AgentService_GetStatus_Handler,
		},
		{
			MethodName: "UpdateBlacklist",
			Handler:    _AgentService_UpdateBlacklist_Handler,
		},
		{
			MethodName: "UpdateWhitelist",
			Handler:    _AgentService_UpdateWhitelist_Handler,
		},
		{
			MethodName: "GetFilterConfig",
			Handler:    _AgentService_GetFilterConfig_Handler,
		},
		{
			MethodName: "RollbackConfig",
			Handler:    _AgentService_RollbackConfig_Handler,
		},
		{
			MethodName: "UpdateMultiplexConfig",
			Handler:    _AgentService_UpdateMultiplexConfig_Handler,
		},
		{
			MethodName: "GetMultiplexConfig",
			Handler:    _AgentService_GetMultiplexConfig_Handler,
		},
		{
			MethodName: "UninstallAgent",
			Handler:    _AgentService_UninstallAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/agent.proto",
}
