syntax = "proto3";
package agent;
option go_package = "github.com/xbox/sing-box-manager/proto/agent";

// Agent管理服务
service AgentService {
    // 节点注册
    rpc RegisterAgent(RegisterRequest) returns (RegisterResponse);
    // 心跳检测
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    // 配置下发
    rpc UpdateConfig(ConfigRequest) returns (ConfigResponse);
    // 规则管理
    rpc UpdateRules(RulesRequest) returns (RulesResponse);
    // 获取节点状态
    rpc GetStatus(StatusRequest) returns (StatusResponse);
    // 更新黑名单
    rpc UpdateBlacklist(BlacklistRequest) returns (BlacklistResponse);
    // 更新白名单
    rpc UpdateWhitelist(WhitelistRequest) returns (WhitelistResponse);
    // 获取黑白名单配置
    rpc GetFilterConfig(FilterConfigRequest) returns (FilterConfigResponse);
    // 回滚配置
    rpc RollbackConfig(RollbackRequest) returns (RollbackResponse);
    // 更新多路复用配置
    rpc UpdateMultiplexConfig(MultiplexConfigRequest) returns (MultiplexConfigResponse);
    // 获取多路复用配置
    rpc GetMultiplexConfig(MultiplexStatusRequest) returns (MultiplexStatusResponse);
    // 卸载Agent
    rpc UninstallAgent(UninstallRequest) returns (UninstallResponse);
}

// 注册请求
message RegisterRequest {
    string agent_id = 1;
    string hostname = 2;
    string ip_address = 3;
    string version = 4;
    map<string, string> metadata = 5;
    IPRangeInfo ip_range_info = 6; // IP段信息
}

// 注册响应
message RegisterResponse {
    bool success = 1;
    string message = 2;
    string token = 3;
}

// 心跳请求
message HeartbeatRequest {
    string agent_id = 1;
    string status = 2;
    map<string, string> metrics = 3;
    IPRangeInfo ip_range_info = 4; // IP段信息（可选，仅在变化时发送）
}

// 心跳响应
message HeartbeatResponse {
    bool success = 1;
    string message = 2;
    int64 next_heartbeat_interval = 3; // 秒
}

// 配置请求
message ConfigRequest {
    string agent_id = 1;
    string config_content = 2;
    string config_version = 3;
    bool force_update = 4;
}

// 配置响应
message ConfigResponse {
    bool success = 1;
    string message = 2;
    string applied_version = 3;
}

// 规则请求
message RulesRequest {
    string agent_id = 1;
    repeated Rule rules = 2;
    string operation = 3; // add, delete, update, replace
}

// 规则响应
message RulesResponse {
    bool success = 1;
    string message = 2;
    repeated string failed_rules = 3;
}

// 状态请求
message StatusRequest {
    string agent_id = 1;
}

// 状态响应
message StatusResponse {
    bool success = 1;
    string agent_id = 2;
    string status = 3;
    string config_version = 4;
    int32 rules_count = 5;
    map<string, string> system_info = 6;
    repeated string active_connections = 7;
}

// 规则定义
message Rule {
    string id = 1;
    string type = 2; // inbound, outbound, route, dns
    string content = 3;
    int32 priority = 4;
    bool enabled = 5;
    map<string, string> metadata = 6;
}

// 黑名单请求
message BlacklistRequest {
    string agent_id = 1;
    string protocol = 2; // http, https, socks5, etc.
    repeated string domains = 3;
    repeated string ips = 4;
    repeated string ports = 5;
    string operation = 6; // add, remove, replace, clear
}

// 黑名单响应
message BlacklistResponse {
    bool success = 1;
    string message = 2;
    string config_version = 3;
}

// 白名单请求
message WhitelistRequest {
    string agent_id = 1;
    string protocol = 2; // http, https, socks5, etc.
    repeated string domains = 3;
    repeated string ips = 4;
    repeated string ports = 5;
    string operation = 6; // add, remove, replace, clear
}

// 白名单响应
message WhitelistResponse {
    bool success = 1;
    string message = 2;
    string config_version = 3;
}

// 过滤配置请求
message FilterConfigRequest {
    string agent_id = 1;
    string protocol = 2; // 如果为空，返回所有协议的配置
}

// 过滤配置响应
message FilterConfigResponse {
    bool success = 1;
    string message = 2;
    repeated ProtocolFilter filters = 3;
}

// 协议过滤器
message ProtocolFilter {
    string protocol = 1;
    repeated string blacklist_domains = 2;
    repeated string blacklist_ips = 3;
    repeated string blacklist_ports = 4;
    repeated string whitelist_domains = 5;
    repeated string whitelist_ips = 6;
    repeated string whitelist_ports = 7;
    bool enabled = 8;
    string last_updated = 9;
}

// 回滚请求
message RollbackRequest {
    string agent_id = 1;
    string target_version = 2; // 回滚到的目标版本，如果为空则回滚到上一个版本
    string reason = 3; // 回滚原因
}

// 回滚响应
message RollbackResponse {
    bool success = 1;
    string message = 2;
    string rolled_back_version = 3;
    string current_version = 4;
}

// 多路复用配置请求
message MultiplexConfigRequest {
    string agent_id = 1;
    string protocol = 2; // 协议类型：vmess, vless, trojan, shadowsocks
    MultiplexConfig multiplex_config = 3;
}

// 多路复用配置响应
message MultiplexConfigResponse {
    bool success = 1;
    string message = 2;
    string config_version = 3;
}

// 多路复用状态请求
message MultiplexStatusRequest {
    string agent_id = 1;
    string protocol = 2; // 如果为空，返回所有协议的配置
}

// 多路复用状态响应
message MultiplexStatusResponse {
    bool success = 1;
    string message = 2;
    repeated ProtocolMultiplex multiplex_configs = 3;
}

// 多路复用配置
message MultiplexConfig {
    bool enabled = 1;           // 是否启用多路复用
    string protocol = 2;        // 多路复用协议，固定为"smux"
    int32 max_connections = 3;  // 最大连接数
    int32 min_streams = 4;      // 最小流数量
    bool padding = 5;           // 是否启用填充
    map<string, string> brutal = 6; // brutal配置（可选）
}

// 协议多路复用配置
message ProtocolMultiplex {
    string protocol = 1;               // 协议名称
    MultiplexConfig multiplex_config = 2; // 多路复用配置
    bool enabled = 3;                  // 该协议是否启用多路复用
    string last_updated = 4;           // 最后更新时间
}

// IP段信息
message IPRangeInfo {
    string ip_range = 1;    // IP段，如 192.168.1.0/24 或 10.0.0.0/8
    string country = 2;     // 国家
    string region = 3;      // 地区/省份  
    string city = 4;        // 城市
    string isp = 5;         // 运营商
    string detection_method = 6; // 检测方法 (auto/manual/api)
    string detected_at = 7; // 检测时间
}

// Agent卸载请求
message UninstallRequest {
    string agent_id = 1;        // Agent ID
    bool force_uninstall = 2;   // 是否强制卸载
    string reason = 3;          // 卸载原因
    int32 timeout_seconds = 4;  // 超时时间（秒）
}

// Agent卸载响应
message UninstallResponse {
    bool success = 1;            // 是否成功
    string message = 2;          // 响应消息
    string uninstall_status = 3; // 卸载状态: preparing, cleaning_singbox, reporting, completed, failed
    repeated string cleaned_files = 4; // 已清理的文件列表
    int64 cleanup_time = 5;      // 清理耗时（毫秒）
}