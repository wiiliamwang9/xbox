// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/envoy.proto

package envoy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvoyService_RegisterBackend_FullMethodName          = "/envoy.EnvoyService/RegisterBackend"
	EnvoyService_UnregisterBackend_FullMethodName        = "/envoy.EnvoyService/UnregisterBackend"
	EnvoyService_GetBackendHealth_FullMethodName         = "/envoy.EnvoyService/GetBackendHealth"
	EnvoyService_UpdateTLSCertificate_FullMethodName     = "/envoy.EnvoyService/UpdateTLSCertificate"
	EnvoyService_GetTLSStatus_FullMethodName             = "/envoy.EnvoyService/GetTLSStatus"
	EnvoyService_UpdateLoadBalancerConfig_FullMethodName = "/envoy.EnvoyService/UpdateLoadBalancerConfig"
	EnvoyService_GetLoadBalancerStats_FullMethodName     = "/envoy.EnvoyService/GetLoadBalancerStats"
	EnvoyService_UpdateRouteConfig_FullMethodName        = "/envoy.EnvoyService/UpdateRouteConfig"
	EnvoyService_GetRouteConfig_FullMethodName           = "/envoy.EnvoyService/GetRouteConfig"
)

// EnvoyServiceClient is the client API for EnvoyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Envoy代理服务接口
type EnvoyServiceClient interface {
	// 服务发现和负载均衡
	RegisterBackend(ctx context.Context, in *RegisterBackendRequest, opts ...grpc.CallOption) (*RegisterBackendResponse, error)
	UnregisterBackend(ctx context.Context, in *UnregisterBackendRequest, opts ...grpc.CallOption) (*UnregisterBackendResponse, error)
	GetBackendHealth(ctx context.Context, in *GetBackendHealthRequest, opts ...grpc.CallOption) (*GetBackendHealthResponse, error)
	// TLS配置管理
	UpdateTLSCertificate(ctx context.Context, in *UpdateTLSCertificateRequest, opts ...grpc.CallOption) (*UpdateTLSCertificateResponse, error)
	GetTLSStatus(ctx context.Context, in *GetTLSStatusRequest, opts ...grpc.CallOption) (*GetTLSStatusResponse, error)
	// 负载均衡配置
	UpdateLoadBalancerConfig(ctx context.Context, in *UpdateLoadBalancerConfigRequest, opts ...grpc.CallOption) (*UpdateLoadBalancerConfigResponse, error)
	GetLoadBalancerStats(ctx context.Context, in *GetLoadBalancerStatsRequest, opts ...grpc.CallOption) (*GetLoadBalancerStatsResponse, error)
	// 路由配置
	UpdateRouteConfig(ctx context.Context, in *UpdateRouteConfigRequest, opts ...grpc.CallOption) (*UpdateRouteConfigResponse, error)
	GetRouteConfig(ctx context.Context, in *GetRouteConfigRequest, opts ...grpc.CallOption) (*GetRouteConfigResponse, error)
}

type envoyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvoyServiceClient(cc grpc.ClientConnInterface) EnvoyServiceClient {
	return &envoyServiceClient{cc}
}

func (c *envoyServiceClient) RegisterBackend(ctx context.Context, in *RegisterBackendRequest, opts ...grpc.CallOption) (*RegisterBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterBackendResponse)
	err := c.cc.Invoke(ctx, EnvoyService_RegisterBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) UnregisterBackend(ctx context.Context, in *UnregisterBackendRequest, opts ...grpc.CallOption) (*UnregisterBackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterBackendResponse)
	err := c.cc.Invoke(ctx, EnvoyService_UnregisterBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) GetBackendHealth(ctx context.Context, in *GetBackendHealthRequest, opts ...grpc.CallOption) (*GetBackendHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackendHealthResponse)
	err := c.cc.Invoke(ctx, EnvoyService_GetBackendHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) UpdateTLSCertificate(ctx context.Context, in *UpdateTLSCertificateRequest, opts ...grpc.CallOption) (*UpdateTLSCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTLSCertificateResponse)
	err := c.cc.Invoke(ctx, EnvoyService_UpdateTLSCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) GetTLSStatus(ctx context.Context, in *GetTLSStatusRequest, opts ...grpc.CallOption) (*GetTLSStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTLSStatusResponse)
	err := c.cc.Invoke(ctx, EnvoyService_GetTLSStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) UpdateLoadBalancerConfig(ctx context.Context, in *UpdateLoadBalancerConfigRequest, opts ...grpc.CallOption) (*UpdateLoadBalancerConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLoadBalancerConfigResponse)
	err := c.cc.Invoke(ctx, EnvoyService_UpdateLoadBalancerConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) GetLoadBalancerStats(ctx context.Context, in *GetLoadBalancerStatsRequest, opts ...grpc.CallOption) (*GetLoadBalancerStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoadBalancerStatsResponse)
	err := c.cc.Invoke(ctx, EnvoyService_GetLoadBalancerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) UpdateRouteConfig(ctx context.Context, in *UpdateRouteConfigRequest, opts ...grpc.CallOption) (*UpdateRouteConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRouteConfigResponse)
	err := c.cc.Invoke(ctx, EnvoyService_UpdateRouteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyServiceClient) GetRouteConfig(ctx context.Context, in *GetRouteConfigRequest, opts ...grpc.CallOption) (*GetRouteConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteConfigResponse)
	err := c.cc.Invoke(ctx, EnvoyService_GetRouteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvoyServiceServer is the server API for EnvoyService service.
// All implementations must embed UnimplementedEnvoyServiceServer
// for forward compatibility.
//
// Envoy代理服务接口
type EnvoyServiceServer interface {
	// 服务发现和负载均衡
	RegisterBackend(context.Context, *RegisterBackendRequest) (*RegisterBackendResponse, error)
	UnregisterBackend(context.Context, *UnregisterBackendRequest) (*UnregisterBackendResponse, error)
	GetBackendHealth(context.Context, *GetBackendHealthRequest) (*GetBackendHealthResponse, error)
	// TLS配置管理
	UpdateTLSCertificate(context.Context, *UpdateTLSCertificateRequest) (*UpdateTLSCertificateResponse, error)
	GetTLSStatus(context.Context, *GetTLSStatusRequest) (*GetTLSStatusResponse, error)
	// 负载均衡配置
	UpdateLoadBalancerConfig(context.Context, *UpdateLoadBalancerConfigRequest) (*UpdateLoadBalancerConfigResponse, error)
	GetLoadBalancerStats(context.Context, *GetLoadBalancerStatsRequest) (*GetLoadBalancerStatsResponse, error)
	// 路由配置
	UpdateRouteConfig(context.Context, *UpdateRouteConfigRequest) (*UpdateRouteConfigResponse, error)
	GetRouteConfig(context.Context, *GetRouteConfigRequest) (*GetRouteConfigResponse, error)
	mustEmbedUnimplementedEnvoyServiceServer()
}

// UnimplementedEnvoyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvoyServiceServer struct{}

func (UnimplementedEnvoyServiceServer) RegisterBackend(context.Context, *RegisterBackendRequest) (*RegisterBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBackend not implemented")
}
func (UnimplementedEnvoyServiceServer) UnregisterBackend(context.Context, *UnregisterBackendRequest) (*UnregisterBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterBackend not implemented")
}
func (UnimplementedEnvoyServiceServer) GetBackendHealth(context.Context, *GetBackendHealthRequest) (*GetBackendHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackendHealth not implemented")
}
func (UnimplementedEnvoyServiceServer) UpdateTLSCertificate(context.Context, *UpdateTLSCertificateRequest) (*UpdateTLSCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTLSCertificate not implemented")
}
func (UnimplementedEnvoyServiceServer) GetTLSStatus(context.Context, *GetTLSStatusRequest) (*GetTLSStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTLSStatus not implemented")
}
func (UnimplementedEnvoyServiceServer) UpdateLoadBalancerConfig(context.Context, *UpdateLoadBalancerConfigRequest) (*UpdateLoadBalancerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoadBalancerConfig not implemented")
}
func (UnimplementedEnvoyServiceServer) GetLoadBalancerStats(context.Context, *GetLoadBalancerStatsRequest) (*GetLoadBalancerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancerStats not implemented")
}
func (UnimplementedEnvoyServiceServer) UpdateRouteConfig(context.Context, *UpdateRouteConfigRequest) (*UpdateRouteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteConfig not implemented")
}
func (UnimplementedEnvoyServiceServer) GetRouteConfig(context.Context, *GetRouteConfigRequest) (*GetRouteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteConfig not implemented")
}
func (UnimplementedEnvoyServiceServer) mustEmbedUnimplementedEnvoyServiceServer() {}
func (UnimplementedEnvoyServiceServer) testEmbeddedByValue()                      {}

// UnsafeEnvoyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvoyServiceServer will
// result in compilation errors.
type UnsafeEnvoyServiceServer interface {
	mustEmbedUnimplementedEnvoyServiceServer()
}

func RegisterEnvoyServiceServer(s grpc.ServiceRegistrar, srv EnvoyServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvoyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvoyService_ServiceDesc, srv)
}

func _EnvoyService_RegisterBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).RegisterBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_RegisterBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).RegisterBackend(ctx, req.(*RegisterBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_UnregisterBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).UnregisterBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_UnregisterBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).UnregisterBackend(ctx, req.(*UnregisterBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_GetBackendHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).GetBackendHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_GetBackendHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).GetBackendHealth(ctx, req.(*GetBackendHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_UpdateTLSCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTLSCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).UpdateTLSCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_UpdateTLSCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).UpdateTLSCertificate(ctx, req.(*UpdateTLSCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_GetTLSStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTLSStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).GetTLSStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_GetTLSStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).GetTLSStatus(ctx, req.(*GetTLSStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_UpdateLoadBalancerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoadBalancerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).UpdateLoadBalancerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_UpdateLoadBalancerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).UpdateLoadBalancerConfig(ctx, req.(*UpdateLoadBalancerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_GetLoadBalancerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadBalancerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).GetLoadBalancerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_GetLoadBalancerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).GetLoadBalancerStats(ctx, req.(*GetLoadBalancerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_UpdateRouteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).UpdateRouteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_UpdateRouteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).UpdateRouteConfig(ctx, req.(*UpdateRouteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyService_GetRouteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyServiceServer).GetRouteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyService_GetRouteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyServiceServer).GetRouteConfig(ctx, req.(*GetRouteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvoyService_ServiceDesc is the grpc.ServiceDesc for EnvoyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvoyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.EnvoyService",
	HandlerType: (*EnvoyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBackend",
			Handler:    _EnvoyService_RegisterBackend_Handler,
		},
		{
			MethodName: "UnregisterBackend",
			Handler:    _EnvoyService_UnregisterBackend_Handler,
		},
		{
			MethodName: "GetBackendHealth",
			Handler:    _EnvoyService_GetBackendHealth_Handler,
		},
		{
			MethodName: "UpdateTLSCertificate",
			Handler:    _EnvoyService_UpdateTLSCertificate_Handler,
		},
		{
			MethodName: "GetTLSStatus",
			Handler:    _EnvoyService_GetTLSStatus_Handler,
		},
		{
			MethodName: "UpdateLoadBalancerConfig",
			Handler:    _EnvoyService_UpdateLoadBalancerConfig_Handler,
		},
		{
			MethodName: "GetLoadBalancerStats",
			Handler:    _EnvoyService_GetLoadBalancerStats_Handler,
		},
		{
			MethodName: "UpdateRouteConfig",
			Handler:    _EnvoyService_UpdateRouteConfig_Handler,
		},
		{
			MethodName: "GetRouteConfig",
			Handler:    _EnvoyService_GetRouteConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/envoy.proto",
}
